// Generated by CoffeeScript 1.3.3
(function() {
  "use strict";

  var About, AboutView, App, GenericView, HomeView, ListView, MapView, Toilet, ToiletList, ToiletView, api_url, app, position, protect_links, root_url, toilets;

  root_url = '/';

  api_url = root_url + 'api/';

  position = null;

  toilets = null;

  Backbone.View.prototype.remove = function() {
    if (this.beforeClose) {
      this.beforeClose();
    }
    this.$el.empty();
    this.undelegateEvents();
    return this.unbind();
  };

  Backbone.View.prototype.wireup_navs = function() {
    var that;
    that = this;
    return this.$el.find('a[role=nav]').each(function() {
      return $(this).on('click', function(e) {
        e.preventDefault();
        app.navigate($(this).attr('href'), true);
        return false;
      });
    });
  };

  ToiletList = Backbone.Collection.extend({
    model: Toilet,
    url: '',
    parse: function(resp) {
      console.log(resp);
      return resp;
    },
    set_url: function() {
      return this.url = api_url + 'nearest.json';
    }
  });

  Toilet = Backbone.Model.extend({
    defaults: {
      id: null,
      lat: 0,
      long: 0,
      description: '',
      owner: '',
      address: {
        street: '',
        number: '',
        postal: '',
        city: ''
      },
      distance: 0
    }
  });

  HomeView = Backbone.View.extend({
    el: $('#main'),
    model: null,
    initialize: function() {
      this.template = Handlebars.getTemplate("index");
      this.detect();
      this.model = {
        data: {}
      };
      return this.render();
    },
    position_found: function() {
      return app.navigate("list", true);
    },
    detect: function() {
      var _this = this;
      if (navigator.geolocation) {
        return navigator.geolocation.getCurrentPosition(function(pos) {
          position = pos;
          return _this.position_found();
        });
      }
    },
    render: function() {
      this.$el.html(this.template(this.model.data));
      this.wireup_navs();
      return this;
    }
  });

  ListView = Backbone.View.extend({
    el: $('#main'),
    model: null,
    initialize: function() {
      this.template = Handlebars.getTemplate("list");
      this.model = {
        data: {
          lat: position.coords.latitude,
          long: position.coords.longitude,
          toilets: toilets
        }
      };
      this.render();
      return this.reload_data();
    },
    events: {
      'click .reload': 'reload_data'
    },
    reload_data: function() {
      var _this = this;
      this.collection = new ToiletList;
      this.collection.set_url();
      return this.collection.fetch({
        success: function(collection, response, options) {
          toilets = _this.collection;
          _this.model.data.toilets = _this.collection;
          console.log('test');
          return _this.render();
        },
        error: function(collection, xhr, options) {
          console.log(collection);
          console.log(xhr);
          return console.log(options);
        }
      });
    },
    render: function() {
      this.$el.html(this.template(this.model.data));
      this.wireup_navs();
      return this;
    }
  });

  MapView = Backbone.View.extend({
    el: $('#main'),
    model: null,
    map: null,
    markers: null,
    initialize: function() {
      this.template = Handlebars.getTemplate("map");
      this.model = {
        data: {
          lat: position.coords.latitude,
          long: position.coords.longitude,
          toilets: toilets
        }
      };
      this.render();
      this.map_init();
      this.map_plot();
      return this.reload_data();
    },
    map_init: function() {
      return this.map = new google.maps.Map(document.getElementById('map_canvas'), {
        zoom: 13,
        center: new google.maps.LatLng(position.coords.latitude, position.coords.longitude),
        mapTypeId: google.maps.MapTypeId.ROADMAP
      });
    },
    map_clear_markers: function() {
      var marker, _i, _len, _ref, _results;
      if (this.markers) {
        _ref = this.markers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          marker = _ref[_i];
          _results.push(marker.setMap(null));
        }
        return _results;
      }
    },
    map_plot: function() {
      var toilet, _i, _len, _results;
      this.map_clear_markers();
      if (toilets) {
        this.markers = [];
        _results = [];
        for (_i = 0, _len = toilets.length; _i < _len; _i++) {
          toilet = toilets[_i];
          _results.push(this.markers.push(new google.maps.Marker({
            position: new google.maps.LatLng(toilet.lat, toilet.long),
            map: map,
            icon: 'assets/img/toilet.png'
          })));
        }
        return _results;
      }
    },
    reload_data: function() {
      var _this = this;
      this.collection = new Toilets;
      this.collection.set_url();
      return this.collection.fetch({
        dataType: 'jsonp',
        success: function() {
          toilets = _this.collection;
          _this.model.data.toilets = _this.collection;
          _this.render();
          return _this.map_plot();
        }
      });
    },
    render: function() {
      this.$el.html(this.template(this.model.data));
      this.wireup_navs();
      return this;
    }
  });

  ToiletView = Backbone.View.extend({
    el: $('#main'),
    initialize: function() {
      var _this = this;
      this.template = Handlebars.getTemplate('toilet');
      if (toilets) {
        return this.show_model();
      } else {
        toilets = new Toilets;
        toilets.set_url();
        return toilets.fetch({
          dataType: 'jsonp',
          success: function() {
            return _this.show_model();
          }
        });
      }
    },
    show_model: function() {
      this.model = toilets.where({
        id: this.options.toilet_id
      });
      if (this.model) {
        return this.render();
      } else {
        return app.navigate('', true);
      }
    },
    render: function() {
      this.$el.html(this.template(this.model.toJSON().data));
      this.wireup_navs();
      return this;
    },
    events: {
      'click .back': window.history.back
    }
  });

  GenericView = Backbone.View.extend({
    el: $('#main'),
    initialize: function() {
      this.template = Handlebars.getTemplate(this.options.template);
      return this.render();
    },
    render: function() {
      this.$el.html(this.template());
      this.wireup_navs();
      return this;
    }
  });

  About = Backbone.Model.extend({
    defaults: {
      data: {}
    }
  });

  AboutView = Backbone.View.extend({
    el: $('#main'),
    os: null,
    initialize: function() {
      this.model = new About;
      this.template = Handlebars.getTemplate("about");
      this.os = this.detect(navigator.userAgent);
      alert(this.os);
      return this.render();
    },
    detect: function(ua) {
      if (ua.match(/(Android)\s+([\d.]+)/)) {
        return 'android';
      } else {
        return 'ios';
      }
    },
    render: function() {
      this.$el.html(this.template(this.model.toJSON().data));
      return this;
    }
  });

  App = Backbone.Router.extend({
    el: $('#main'),
    states: null,
    current_view: null,
    initialize: function() {},
    routes: {
      "index.html": "index",
      "map": "map",
      "list": "list",
      "toilet/:id": "toilet",
      "about": "about",
      ":page": "generic"
    },
    before: function() {
      if (this.current_view != null) {
        return this.current_view.remove();
      }
    },
    position_required: function() {
      if (!position) {
        app.navigate('', true);
        return false;
      }
      return true;
    },
    index: function() {
      this.before();
      return this.current_view = new HomeView;
    },
    list: function() {
      this.before();
      if (this.position_required()) {
        return this.current_view = new ListView;
      }
    },
    map: function() {
      this.before();
      if (this.position_required()) {
        return this.current_view = new MapView;
      }
    },
    toilet: function(toilet_id) {
      this.before();
      return this.current_view = new ToiletView({
        toilet_id: toilet_id
      });
    },
    about: function() {
      this.before();
      return this.current_view = new AboutView;
    },
    generic: function(page) {
      this.before();
      return this.current_view = new GenericView({
        template: page
      });
    }
  });

  protect_links = function() {
    var i, link, _i, _len, _ref, _results;
    _ref = document.getElementsByTagName('a');
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      link = _ref[i];
      _results.push(link.onclick = function() {
        return location.href = this;
      });
    }
    return _results;
  };

  app = new App();

  app.navigate();

  Backbone.history.start({
    pushState: true,
    root: root_url
  });

  protect_links();

}).call(this);
