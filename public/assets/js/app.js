// Generated by CoffeeScript 1.3.3
(function() {
  "use strict";

  var AboutView, App, BaseView, GenericView, HomeView, ListView, MapView, Toilet, ToiletList, ToiletView, app, protect_links,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.root_url = '/';

  window.api_url = window.root_url + 'api/';

  window.position = null;

  window.toilets = null;

  Backbone.View.prototype.remove = function() {
    if (this.beforeClose) {
      this.beforeClose();
    }
    this.$el.empty();
    this.undelegateEvents();
    return this.unbind();
  };

  Backbone.View.prototype.wireup_navs = function() {
    var that;
    that = this;
    return this.$el.find('a[role=nav]').each(function() {
      return $(this).on('click', function(e) {
        e.preventDefault();
        app.navigate($(this).attr('href'), true);
        return false;
      });
    });
  };

  BaseView = (function(_super) {

    __extends(BaseView, _super);

    function BaseView(options) {
      this.bindings = [];
      BaseView.__super__.constructor.call(this, options);
    }

    BaseView.prototype.bind_to = function(model, event, callback) {
      model.bind(event, callback, this);
      return this.bindings.push({
        model: model,
        event: event,
        callback: callback
      });
    };

    BaseView.prototype.unbind_all = function() {
      _.each(this.bindings, function(binding) {
        return binding.model.unbind(binding.event, binding.callback);
      });
      return this.bindings = [];
    };

    BaseView.prototype.close = function() {
      this.unbind_all();
      this.unbind();
      return this.remove();
    };

    return BaseView;

  })(Backbone.View);

  Toilet = (function(_super) {

    __extends(Toilet, _super);

    function Toilet() {
      return Toilet.__super__.constructor.apply(this, arguments);
    }

    Toilet.prototype.defaults = {
      id: null,
      lat: 0,
      long: 0,
      description: '',
      owner: '',
      address: {
        street: '',
        number: '',
        postal: '',
        city: ''
      },
      distance: 0
    };

    return Toilet;

  })(Backbone.Model);

  ToiletList = (function(_super) {

    __extends(ToiletList, _super);

    function ToiletList() {
      return ToiletList.__super__.constructor.apply(this, arguments);
    }

    ToiletList.prototype.model = Toilet;

    ToiletList.prototype.url = function() {
      var return_url;
      return_url = window.api_url + 'nearest.json';
      if (window.position) {
        return_url += '?lat=' + position.coords.latitude + '&long=' + position.coords.longitude;
      }
      return return_url;
    };

    return ToiletList;

  })(Backbone.Collection);

  HomeView = (function(_super) {

    __extends(HomeView, _super);

    function HomeView() {
      return HomeView.__super__.constructor.apply(this, arguments);
    }

    HomeView.prototype.el = $('#main');

    HomeView.prototype.model = null;

    HomeView.prototype.initialize = function() {
      this.template = Handlebars.getTemplate("index");
      this.detect();
      this.model = {
        data: {}
      };
      return this.render();
    };

    HomeView.prototype.position_found = function() {
      return app.navigate("list", true);
    };

    HomeView.prototype.detect = function() {
      var _this = this;
      if (navigator.geolocation) {
        return navigator.geolocation.getCurrentPosition(function(pos) {
          window.position = pos;
          return _this.position_found();
        }, function(err) {
          if (err.code === 1) {
            return alert("Error: Wij kregen geen toegnag tot uw exacte locatie!");
          } else if (err.code === 2) {
            return alert("Error: Uw exacte locatie is niet beschikbaar!");
          }
        }, {
          timeout: 5000
        });
      } else {
        return alert('Uw toestel heeft geen GPS / geolocatie mogelijkheden');
      }
    };

    HomeView.prototype.render = function() {
      this.$el.html(this.template(this.model.data));
      this.wireup_navs();
      return this;
    };

    return HomeView;

  })(Backbone.View);

  ListView = (function(_super) {

    __extends(ListView, _super);

    function ListView() {
      return ListView.__super__.constructor.apply(this, arguments);
    }

    ListView.prototype.el = $('#main');

    ListView.prototype.model = null;

    ListView.prototype.initialize = function() {
      this.template = Handlebars.getTemplate("list");
      this.model = {
        data: {
          lat: window.position.coords.latitude,
          long: window.position.coords.longitude
        }
      };
      if (!window.toilets) {
        this.collection = new ToiletList;
        this.bind_to(this.collection, 'reset', this.render);
        this.collection.fetch();
      } else {
        this.collection = window.toilets;
      }
      return this.render();
    };

    ListView.prototype.events = {
      'click .reload': 'reload_data'
    };

    ListView.prototype.reload_data = function(e) {
      e.preventDefault();
      this.collection.fetch();
      return false;
    };

    ListView.prototype.render = function() {
      this.model.data.toilets = this.collection.toJSON();
      window.toilets = this.collection;
      this.$el.html(this.template(this.model.data));
      this.wireup_navs();
      return this;
    };

    return ListView;

  })(BaseView);

  MapView = (function(_super) {

    __extends(MapView, _super);

    function MapView() {
      return MapView.__super__.constructor.apply(this, arguments);
    }

    MapView.prototype.el = $('#main');

    MapView.prototype.model = null;

    MapView.prototype.map = null;

    MapView.prototype.markers = null;

    MapView.prototype.initialize = function() {
      this.template = Handlebars.getTemplate("map");
      this.model = {
        data: {
          lat: window.position.coords.latitude,
          long: window.position.coords.longitude,
          toilets: window.toilets ? window.toilets.toJSON() : null
        }
      };
      if (!window.toilets) {
        this.collection = new ToiletList;
        this.bind_to(this.collection, 'reset', this.render);
        this.collection.fetch();
      } else {
        this.collection = window.toilets;
      }
      return this.render();
    };

    MapView.prototype.map_init = function() {
      return this.map = new google.maps.Map(document.getElementById('map_canvas'), {
        zoom: 13,
        center: new google.maps.LatLng(window.position.coords.latitude, window.position.coords.longitude),
        mapTypeId: google.maps.MapTypeId.ROADMAP
      });
    };

    MapView.prototype.map_clear_markers = function() {
      var marker, _i, _len, _ref, _results;
      if (this.markers) {
        _ref = this.markers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          marker = _ref[_i];
          _results.push(marker.setMap(null));
        }
        return _results;
      }
    };

    MapView.prototype.map_plot = function() {
      var _this = this;
      this.map_clear_markers();
      if (this.collection.length > 0) {
        this.markers = [];
        return this.collection.each(function(toilet) {
          var map_position, marker;
          map_position = new google.maps.LatLng(parseFloat(toilet.get('lat')), parseFloat(toilet.get('long')));
          marker = new google.maps.Marker({
            position: map_position,
            map: _this.map,
            icon: '/assets/img/toilet.png'
          });
          return _this.markers.push(marker);
        });
      }
    };

    MapView.prototype.events = {
      'click .reload': 'reload_data'
    };

    MapView.prototype.reload_data = function(e) {
      e.preventDefault();
      this.collection.fetch();
      return false;
    };

    MapView.prototype.render = function() {
      this.model.data.toilets = this.collection.toJSON();
      window.toilets = this.collection;
      this.$el.html(this.template(this.model.data));
      this.wireup_navs();
      this.map_init();
      this.map_plot();
      return this;
    };

    return MapView;

  })(BaseView);

  ToiletView = (function(_super) {

    __extends(ToiletView, _super);

    function ToiletView() {
      return ToiletView.__super__.constructor.apply(this, arguments);
    }

    ToiletView.prototype.el = $('#main');

    ToiletView.prototype.initialize = function() {
      this.template = Handlebars.getTemplate('toilet');
      if (!window.toilets) {
        this.collection = new ToiletList;
        this.bind_to(this.collection, 'reset', this.show_model);
        return this.collection.fetch();
      } else {
        this.collection = window.toilets;
        return this.show_model();
      }
    };

    ToiletView.prototype.show_model = function() {
      this.model = this.collection.get(this.options.toilet_id);
      window.toilets = this.collection;
      if (this.model) {
        return this.render();
      } else {
        return app.navigate('', true);
      }
    };

    ToiletView.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      this.wireup_navs();
      return this;
    };

    ToiletView.prototype.back_to_list = function(e) {
      e.preventDefault();
      window.history.back();
      return false;
    };

    ToiletView.prototype.events = {
      'click .back': 'back_to_list'
    };

    return ToiletView;

  })(BaseView);

  GenericView = (function(_super) {

    __extends(GenericView, _super);

    function GenericView() {
      return GenericView.__super__.constructor.apply(this, arguments);
    }

    GenericView.prototype.el = $('#main');

    GenericView.prototype.initialize = function() {
      this.template = Handlebars.getTemplate(this.options.template);
      return this.render();
    };

    GenericView.prototype.render = function() {
      this.$el.html(this.template());
      this.wireup_navs();
      return this;
    };

    return GenericView;

  })(BaseView);

  AboutView = (function(_super) {

    __extends(AboutView, _super);

    function AboutView() {
      return AboutView.__super__.constructor.apply(this, arguments);
    }

    AboutView.prototype.el = $('#main');

    AboutView.prototype.os = null;

    AboutView.prototype.initialize = function() {
      this.template = Handlebars.getTemplate("about");
      this.os = this.detect(navigator.userAgent);
      alert(this.os);
      return this.render();
    };

    AboutView.prototype.detect = function(ua) {
      if (ua.match(/(Android)\s+([\d.]+)/)) {
        return 'android';
      } else {
        return 'ios';
      }
    };

    AboutView.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON().data));
      return this;
    };

    return AboutView;

  })(BaseView);

  App = (function(_super) {

    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.el = $('#main');

    App.prototype.states = null;

    App.prototype.current_view = null;

    App.prototype.initialize = function() {};

    App.prototype.routes = {
      "": "index",
      "map": "map",
      "list": "list",
      "toilet/:id": "toilet",
      "about": "about",
      ":page": "generic"
    };

    App.prototype.before = function() {
      if (this.current_view != null) {
        return this.current_view.remove();
      }
    };

    App.prototype.position_required = function() {
      if (!position) {
        app.navigate('', true);
        return false;
      }
      return true;
    };

    App.prototype.index = function() {
      this.before();
      return this.current_view = new HomeView;
    };

    App.prototype.list = function() {
      this.before();
      if (this.position_required()) {
        return this.current_view = new ListView;
      }
    };

    App.prototype.map = function() {
      this.before();
      if (this.position_required()) {
        return this.current_view = new MapView;
      }
    };

    App.prototype.toilet = function(toilet_id) {
      this.before();
      return this.current_view = new ToiletView({
        toilet_id: toilet_id
      });
    };

    App.prototype.about = function() {
      this.before();
      return this.current_view = new AboutView;
    };

    App.prototype.generic = function(page) {
      this.before();
      return this.current_view = new GenericView({
        template: page
      });
    };

    return App;

  })(Backbone.Router);

  protect_links = function() {
    var i, link, _i, _len, _ref, _results;
    _ref = document.getElementsByTagName('a');
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      link = _ref[i];
      _results.push(link.onclick = function() {
        return location.href = this;
      });
    }
    return _results;
  };

  app = new App();

  app.navigate();

  Backbone.history.start({
    pushState: true,
    root: window.root_url
  });

  protect_links();

}).call(this);
